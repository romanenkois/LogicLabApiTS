"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommentsService = void 0;
const _database_1 = require("../../database/index.js");
class CommentsService {
    static getCommentsOfLesson(lessonHref) {
        return __awaiter(this, void 0, void 0, function* () {
            const db = yield _database_1.MongoDB.getDB();
            const comments = yield db
                .collection('comments')
                .find({ lessonHref: lessonHref })
                .toArray();
            return comments ? comments : [];
        });
    }
    static createNewComment(comment) {
        return __awaiter(this, void 0, void 0, function* () {
            const db = yield _database_1.MongoDB.getDB();
            const _comment = Object.assign(Object.assign({}, comment), { createdAt: new Date(), updatedAt: new Date() });
            const response = yield db
                // we omit the id couse it will be generated by the database on its own
                .collection('comments')
                .insertOne(_comment);
            if (response.insertedId) {
                const comment__ = yield db
                    .collection('comments')
                    .findOne({ _id: response.insertedId });
                if (comment__) {
                    return comment__;
                }
            }
            return null;
        });
    }
}
exports.CommentsService = CommentsService;
